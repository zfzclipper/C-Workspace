stream
(1)ANY source of input or destination of output.
(2)Represent files stored on various media, or associated with devices that don't store files.

file pointer
(1)Type: FILE*, declared in <stdio,h>.
(2)Used to access a stream in C program.
(3)Three standard streams (FILE*):
   [1]stdin, keyboard(default), input redirection <
   [2]stdout, screen(default), output redirection > 
   [3]stderr, screen(default), output redirection >
(4)Writing error messages to "stderr" instead of "stdout", guarantees that those error messages appear on screen even when stdout is redirected.

NOTE: 
Where is it defined: http://stackoverflow.com/questions/6906238/where-is-stdin-defined-in-c-standard-library

text file vs. binary file
(1)bytes in text file represents characters; 
   bytes in binary file doesn't necessary represent characters (e.g. groups of bytes may represent other data types like integers)
(2)text files are divided into lines; each line ends with one or two special characters.
   text files may contain a special "end-of-file" marker.
(3)binary files aren't divided into lines; there are no end-of-line or end-of-file markers; all bytes are treated equally.

Open a file
(1)FILE* fopen(const char* restrict filename, const char* restrict mode);
(2)a null pointer is returned when fopen cannot open a file.
(3)Mode string specifies:
   [1]Operations(read/write/append) to be performed;
   [2]file format(text/binary);
(4)Switch between read and write operations:
   [1]read ----> write: call file-positioning function, or reading reaches the end of file.
   [2]write ----> read: call fflush, or file-positioning function.

Close a file
(1)int fclose(FILE* stream);
(2)Returns 0 if file is closed successfully. Otherwise, returns the error code EOF (i.e. a macro defined in <stdio.h>).

Append a file
(1)FILE* freopen(const char* filename, const char* mode, FILE* stream);
(2)Attach a different file to a stream that is already open. To associate a file with one of standard streams(stdin, stdout, or stderr).
